import numpy as np
#TODO: Marissa have to introduce a way to get CELL_AREA and CELL_LENGTH
from build_cells import *
#---------------
#streaming (stiffness), grad_v*grad_u
#---------------
streaming = np.array([
[ 6.6666666666666674e-01,-1.6666666666666666e-01,-1.6666666666666666e-01,-3.3333333333333337e-01],
[-1.6666666666666666e-01, 6.6666666666666674e-01,-3.3333333333333337e-01,-1.6666666666666666e-01],
[-1.6666666666666666e-01,-3.3333333333333337e-01, 6.6666666666666674e-01,-1.6666666666666666e-01],
[-3.3333333333333337e-01,-1.6666666666666666e-01,-1.6666666666666666e-01, 6.6666666666666674e-01]
])

#---------------
#mass, v*u
#---------------
mass = np.array([
[ 1.1111111111111113e-01, 5.5555555555555566e-02, 5.5555555555555566e-02, 2.7777777777777783e-02],
[ 5.5555555555555566e-02, 1.1111111111111113e-01, 2.7777777777777783e-02, 5.5555555555555566e-02],
[ 5.5555555555555566e-02, 2.7777777777777783e-02, 1.1111111111111112e-01, 5.5555555555555566e-02],
[ 2.7777777777777783e-02, 5.5555555555555566e-02, 5.5555555555555566e-02, 1.1111111111111112e-01]
])*CELL_AREA

#---------------
#dx_v * dx_u
#---------------
dxdx = np.array([
[ 3.3333333333333331e-01,-3.3333333333333331e-01, 1.6666666666666669e-01,-1.6666666666666669e-01],
[-3.3333333333333331e-01, 3.3333333333333331e-01,-1.6666666666666669e-01, 1.6666666666666669e-01],
[ 1.6666666666666669e-01,-1.6666666666666669e-01, 3.3333333333333337e-01,-3.3333333333333337e-01],
[-1.6666666666666669e-01, 1.6666666666666669e-01,-3.3333333333333337e-01, 3.3333333333333337e-01]
])

#---------------
#dx_v * dy_u
#---------------
dxdy = np.array([
[ 2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01,-2.5000000000000000e-01],
[-2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01, 2.5000000000000000e-01],
[ 2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01,-2.5000000000000000e-01],
[-2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01, 2.5000000000000000e-01]
])

#---------------
#dy_v * dx_u
#---------------
dydx = np.array([
[ 2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01],
[ 2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01],
[-2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01],
[-2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01]
])

#---------------
#dy_v * dy_u
#---------------
dydy = np.array([
[ 3.3333333333333337e-01, 1.6666666666666669e-01,-3.3333333333333337e-01,-1.6666666666666669e-01],
[ 1.6666666666666669e-01, 3.3333333333333337e-01,-1.6666666666666669e-01,-3.3333333333333337e-01],
[-3.3333333333333337e-01,-1.6666666666666669e-01, 3.3333333333333337e-01, 1.6666666666666669e-01],
[-1.6666666666666669e-01,-3.3333333333333337e-01, 1.6666666666666669e-01, 3.3333333333333337e-01]
])

#---------------
#dx_v * u
#---------------
dxvu = np.array([
[-1.6666666666666666e-01,-1.6666666666666666e-01,-8.3333333333333356e-02,-8.3333333333333343e-02],
[ 1.6666666666666666e-01, 1.6666666666666666e-01, 8.3333333333333356e-02, 8.3333333333333343e-02],
[-8.3333333333333356e-02,-8.3333333333333343e-02,-1.6666666666666669e-01,-1.6666666666666669e-01],
[ 8.3333333333333356e-02, 8.3333333333333343e-02, 1.6666666666666669e-01, 1.6666666666666669e-01]
])*CELL_LENGTH

#---------------
#dy_v * u
#---------------
dyvu = np.array([
[-1.6666666666666666e-01,-8.3333333333333356e-02,-1.6666666666666669e-01,-8.3333333333333343e-02],
[-8.3333333333333356e-02,-1.6666666666666666e-01,-8.3333333333333343e-02,-1.6666666666666669e-01],
[ 1.6666666666666666e-01, 8.3333333333333356e-02, 1.6666666666666669e-01, 8.3333333333333343e-02],
[ 8.3333333333333356e-02, 1.6666666666666666e-01, 8.3333333333333343e-02, 1.6666666666666669e-01]
])*CELL_LENGTH

#---------------
#correction matrices at quadrature points, x component
#---------------
corx = [
np.array([
[-5.3901890521502134e-02,-6.8464377671353530e-03,-6.8464377671353530e-03,-8.6961161558069672e-04],
[ 5.3901890521502134e-02, 6.8464377671353530e-03, 6.8464377671353530e-03, 8.6961161558069672e-04],
[-6.8464377671353530e-03,-8.6961161558069672e-04,-8.6961161558069672e-04,-1.1045515751022222e-04],
[ 6.8464377671353530e-03, 8.6961161558069672e-04, 8.6961161558069672e-04, 1.1045515751022222e-04]
])*CELL_LENGTH,
np.array([
[-4.8598662630909978e-02,-4.8598662630909978e-02,-6.1728395061728383e-03,-6.1728395061728383e-03],
[ 4.8598662630909978e-02, 4.8598662630909978e-02, 6.1728395061728383e-03, 6.1728395061728383e-03],
[-6.1728395061728383e-03,-6.1728395061728383e-03,-7.8405341847273503e-04,-7.8405341847273503e-04],
[ 6.1728395061728383e-03, 6.1728395061728383e-03, 7.8405341847273503e-04, 7.8405341847273503e-04]
])*CELL_LENGTH,
np.array([
[-6.8464377671353530e-03,-5.3901890521502134e-02,-8.6961161558069672e-04,-6.8464377671353530e-03],
[ 6.8464377671353530e-03, 5.3901890521502134e-02, 8.6961161558069672e-04, 6.8464377671353530e-03],
[-8.6961161558069672e-04,-6.8464377671353530e-03,-1.1045515751022222e-04,-8.6961161558069672e-04],
[ 8.6961161558069672e-04, 6.8464377671353530e-03, 1.1045515751022222e-04, 8.6961161558069672e-04]
])*CELL_LENGTH,
np.array([
[-2.7385751068541409e-02,-3.4784464623227869e-03,-2.7385751068541409e-02,-3.4784464623227869e-03],
[ 2.7385751068541409e-02, 3.4784464623227869e-03, 2.7385751068541409e-02, 3.4784464623227869e-03],
[-2.7385751068541409e-02,-3.4784464623227869e-03,-2.7385751068541409e-02,-3.4784464623227869e-03],
[ 2.7385751068541409e-02, 3.4784464623227869e-03, 2.7385751068541409e-02, 3.4784464623227869e-03]
])*CELL_LENGTH,
np.array([
[-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02],
[ 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02],
[-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02],
[ 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02]
])*CELL_LENGTH,
np.array([
[-3.4784464623227869e-03,-2.7385751068541409e-02,-3.4784464623227869e-03,-2.7385751068541409e-02],
[ 3.4784464623227869e-03, 2.7385751068541409e-02, 3.4784464623227869e-03, 2.7385751068541409e-02],
[-3.4784464623227869e-03,-2.7385751068541409e-02,-3.4784464623227869e-03,-2.7385751068541409e-02],
[ 3.4784464623227869e-03, 2.7385751068541409e-02, 3.4784464623227869e-03, 2.7385751068541409e-02]
])*CELL_LENGTH,
np.array([
[-8.6961161558069672e-04,-1.1045515751022222e-04,-6.8464377671353530e-03,-8.6961161558069672e-04],
[ 8.6961161558069672e-04, 1.1045515751022222e-04, 6.8464377671353530e-03, 8.6961161558069672e-04],
[-6.8464377671353530e-03,-8.6961161558069672e-04,-5.3901890521502134e-02,-6.8464377671353530e-03],
[ 6.8464377671353530e-03, 8.6961161558069672e-04, 5.3901890521502134e-02, 6.8464377671353530e-03]
])*CELL_LENGTH,
np.array([
[-7.8405341847273503e-04,-7.8405341847273503e-04,-6.1728395061728383e-03,-6.1728395061728383e-03],
[ 7.8405341847273503e-04, 7.8405341847273503e-04, 6.1728395061728383e-03, 6.1728395061728383e-03],
[-6.1728395061728383e-03,-6.1728395061728383e-03,-4.8598662630909978e-02,-4.8598662630909978e-02],
[ 6.1728395061728383e-03, 6.1728395061728383e-03, 4.8598662630909978e-02, 4.8598662630909978e-02]
])*CELL_LENGTH,
np.array([
[-1.1045515751022222e-04,-8.6961161558069672e-04,-8.6961161558069672e-04,-6.8464377671353530e-03],
[ 1.1045515751022222e-04, 8.6961161558069672e-04, 8.6961161558069672e-04, 6.8464377671353530e-03],
[-8.6961161558069672e-04,-6.8464377671353530e-03,-6.8464377671353530e-03,-5.3901890521502134e-02],
[ 8.6961161558069672e-04, 6.8464377671353530e-03, 6.8464377671353530e-03, 5.3901890521502134e-02]
])*CELL_LENGTH
]

#---------------
#correction matrices at quadrature points, y component
#---------------
cory = [
np.array([
[-5.3901890521502134e-02,-6.8464377671353530e-03,-6.8464377671353530e-03,-8.6961161558069672e-04],
[-6.8464377671353530e-03,-8.6961161558069672e-04,-8.6961161558069672e-04,-1.1045515751022222e-04],
[ 5.3901890521502134e-02, 6.8464377671353530e-03, 6.8464377671353530e-03, 8.6961161558069672e-04],
[ 6.8464377671353530e-03, 8.6961161558069672e-04, 8.6961161558069672e-04, 1.1045515751022222e-04]
])*CELL_LENGTH,
np.array([
[-2.7385751068541409e-02,-2.7385751068541409e-02,-3.4784464623227869e-03,-3.4784464623227869e-03],
[-2.7385751068541409e-02,-2.7385751068541409e-02,-3.4784464623227869e-03,-3.4784464623227869e-03],
[ 2.7385751068541409e-02, 2.7385751068541409e-02, 3.4784464623227869e-03, 3.4784464623227869e-03],
[ 2.7385751068541409e-02, 2.7385751068541409e-02, 3.4784464623227869e-03, 3.4784464623227869e-03]
])*CELL_LENGTH,
np.array([
[-8.6961161558069672e-04,-6.8464377671353530e-03,-1.1045515751022222e-04,-8.6961161558069672e-04],
[-6.8464377671353530e-03,-5.3901890521502134e-02,-8.6961161558069672e-04,-6.8464377671353530e-03],
[ 8.6961161558069672e-04, 6.8464377671353530e-03, 1.1045515751022222e-04, 8.6961161558069672e-04],
[ 6.8464377671353530e-03, 5.3901890521502134e-02, 8.6961161558069672e-04, 6.8464377671353530e-03]
])*CELL_LENGTH,
np.array([
[-4.8598662630909978e-02,-6.1728395061728383e-03,-4.8598662630909978e-02,-6.1728395061728383e-03],
[-6.1728395061728383e-03,-7.8405341847273503e-04,-6.1728395061728383e-03,-7.8405341847273503e-04],
[ 4.8598662630909978e-02, 6.1728395061728383e-03, 4.8598662630909978e-02, 6.1728395061728383e-03],
[ 6.1728395061728383e-03, 7.8405341847273503e-04, 6.1728395061728383e-03, 7.8405341847273503e-04]
])*CELL_LENGTH,
np.array([
[-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02],
[-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02],
[ 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02],
[ 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02]
])*CELL_LENGTH,
np.array([
[-7.8405341847273503e-04,-6.1728395061728383e-03,-7.8405341847273503e-04,-6.1728395061728383e-03],
[-6.1728395061728383e-03,-4.8598662630909978e-02,-6.1728395061728383e-03,-4.8598662630909978e-02],
[ 7.8405341847273503e-04, 6.1728395061728383e-03, 7.8405341847273503e-04, 6.1728395061728383e-03],
[ 6.1728395061728383e-03, 4.8598662630909978e-02, 6.1728395061728383e-03, 4.8598662630909978e-02]
])*CELL_LENGTH,
np.array([
[-6.8464377671353530e-03,-8.6961161558069672e-04,-5.3901890521502134e-02,-6.8464377671353530e-03],
[-8.6961161558069672e-04,-1.1045515751022222e-04,-6.8464377671353530e-03,-8.6961161558069672e-04],
[ 6.8464377671353530e-03, 8.6961161558069672e-04, 5.3901890521502134e-02, 6.8464377671353530e-03],
[ 8.6961161558069672e-04, 1.1045515751022222e-04, 6.8464377671353530e-03, 8.6961161558069672e-04]
])*CELL_LENGTH,
np.array([
[-3.4784464623227869e-03,-3.4784464623227869e-03,-2.7385751068541409e-02,-2.7385751068541409e-02],
[-3.4784464623227869e-03,-3.4784464623227869e-03,-2.7385751068541409e-02,-2.7385751068541409e-02],
[ 3.4784464623227869e-03, 3.4784464623227869e-03, 2.7385751068541409e-02, 2.7385751068541409e-02],
[ 3.4784464623227869e-03, 3.4784464623227869e-03, 2.7385751068541409e-02, 2.7385751068541409e-02]
])*CELL_LENGTH,
np.array([
[-1.1045515751022222e-04,-8.6961161558069672e-04,-8.6961161558069672e-04,-6.8464377671353530e-03],
[-8.6961161558069672e-04,-6.8464377671353530e-03,-6.8464377671353530e-03,-5.3901890521502134e-02],
[ 1.1045515751022222e-04, 8.6961161558069672e-04, 8.6961161558069672e-04, 6.8464377671353530e-03],
[ 8.6961161558069672e-04, 6.8464377671353530e-03, 6.8464377671353530e-03, 5.3901890521502134e-02]
])*CELL_LENGTH
]

#quadrature points for corrections
qp_ref = [
(1.1270166537925830e-01,1.1270166537925830e-01),
(5.0000000000000000e-01,1.1270166537925830e-01),
(8.8729833462074170e-01,1.1270166537925830e-01),
(1.1270166537925830e-01,5.0000000000000000e-01),
(5.0000000000000000e-01,5.0000000000000000e-01),
(8.8729833462074170e-01,5.0000000000000000e-01),
(1.1270166537925830e-01,8.8729833462074170e-01),
(5.0000000000000000e-01,8.8729833462074170e-01),
(8.8729833462074170e-01,8.8729833462074170e-01)
]

qps = [(x*CELL_LENGTH,y*CELL_LENGTH) for x,y in qp_ref]

'''
The following section is for interpolation function
'''
f0 = lambda x,y: ((CELL_LENGTH-x)/CELL_LENGTH)*((CELL_LENGTH-y)/CELL_LENGTH)
f1 = lambda x,y: (x/CELL_LENGTH)*((CELL_LENGTH-y)/CELL_LENGTH)
f2 = lambda x,y: ((CELL_LENGTH-x)/CELL_LENGTH)*(y/CELL_LENGTH)
f3 = lambda x,y: (x/CELL_LENGTH)*(y/CELL_LENGTH)
interps = [np.array([f0(x,y) for x,y in qps]),
           np.array([f1(x,y) for x,y in qps]),
           np.array([f2(x,y) for x,y in qps]),
           np.array([f3(x,y) for x,y in qps])]

dotprod =lambda K, L:reduce(lambda z1, z2: z1+z2, map(lambda x: reduce(lambda x1, x2: x1*x2, x), zip(K, L)))
def get_sol_at_qps(sol_at_vertices):
    '''@brief Function used to return interpolated values at 3x3 Gauss quadrature points

    @param sol_at_vertices Iterable containing solutions in order of Vertices as
    left-bottom, right-bottom, left-up, right-up. List and Numpy arrays are both usable
    @return Interpolated solutions at quadrature points defined in qps (list of tuples)
    '''
    return dotprod(sol_at_vertices, interps)

df0 = lambda x,y: (-(CELL_LENGTH-y)/CELL_AREA, -(CELL_LENGTH-x)/CELL_AREA)
df1 = lambda x,y: ((CELL_LENGTH-y)/CELL_AREA, -x/CELL_AREA)
df2 = lambda x,y: (-y/CELL_AREA, (CELL_LENGTH-x)/CELL_AREA)
df3 = lambda x,y: (y/CELL_AREA, x/CELL_AREA)
dx_interp = [np.array([df0(x,y)[0] for x,y in qps]),
             np.array([df1(x,y)[0] for x,y in qps]),
             np.array([df2(x,y)[0] for x,y in qps]),
             np.array([df3(x,y)[0] for x,y in qps])]
dy_interp = [np.array([df0(x,y)[1] for x,y in qps]),
             np.array([df1(x,y)[1] for x,y in qps]),
             np.array([df2(x,y)[1] for x,y in qps]),
             np.array([df3(x,y)[1] for x,y in qps])]

def get_grad_at_qps(sol_at_vertices):
    '''@brief Function used to return interpolated gradients at 3x3 Gauss quadrature points

    @param sol_at_vertices Iterable containing solutions in order of Vertices as
    left-bottom, right-bottom, left-up, right-up. List and Numpy arrays are both usable
    @return Interpolated gradients(list of tuples) at quadrature points defined in qps (list of tuples)
    '''
    dxs = dotprod(sol_at_vertices, dx_interp)
    dys = dotprod(sol_at_vertices, dy_interp)
    return [(dx,dy) for dx,dy in zip(dxs, dys)]

qps_1d = [1.1270166537925830e-01*CELL_LENGTH,
          0.5*CELL_LENGTH,
          8.8729833462074170e-01*CELL_LENGTH]
b0 = lambda x: (CELL_LENGTH-x)/CELL_LENGTH
b1 = lambda x: x / CELL_LENGTH
def get_sol_at_bd_qps(sol_at_bd):
    assert len(sol_at_bd)==2, "Per boundary side, there are only two nodal values"
    return [sol_at_bd[0]*b0(x) + sol_at_bd[1]*b1(x) for x in qps_1d]
