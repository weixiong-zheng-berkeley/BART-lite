import numpy as np
from build_cells import *
class Elem(object):
    def __init__(self, cell_length):
        self._cell_length = cell_length
        self._cell_area = cell_length**2.

        #---------------
        #streaming (stiffness), grad_v*grad_u
        #---------------
        self._streaming = np.array([
        [ 6.6666666666666674e-01,-1.6666666666666666e-01,-1.6666666666666666e-01,-3.3333333333333337e-01],
        [-1.6666666666666666e-01, 6.6666666666666674e-01,-3.3333333333333337e-01,-1.6666666666666666e-01],
        [-1.6666666666666666e-01,-3.3333333333333337e-01, 6.6666666666666674e-01,-1.6666666666666666e-01],
        [-3.3333333333333337e-01,-1.6666666666666666e-01,-1.6666666666666666e-01, 6.6666666666666674e-01]
        ])

        #---------------
        #mass, v*u
        #---------------
        self._mass = np.array([
        [ 1.1111111111111113e-01, 5.5555555555555566e-02, 5.5555555555555566e-02, 2.7777777777777783e-02],
        [ 5.5555555555555566e-02, 1.1111111111111113e-01, 2.7777777777777783e-02, 5.5555555555555566e-02],
        [ 5.5555555555555566e-02, 2.7777777777777783e-02, 1.1111111111111112e-01, 5.5555555555555566e-02],
        [ 2.7777777777777783e-02, 5.5555555555555566e-02, 5.5555555555555566e-02, 1.1111111111111112e-01]
        ])*self._cell_area

        #---------------
        #dx_v * dx_u
        #---------------
        self._dxdx = np.array([
        [ 3.3333333333333331e-01,-3.3333333333333331e-01, 1.6666666666666669e-01,-1.6666666666666669e-01],
        [-3.3333333333333331e-01, 3.3333333333333331e-01,-1.6666666666666669e-01, 1.6666666666666669e-01],
        [ 1.6666666666666669e-01,-1.6666666666666669e-01, 3.3333333333333337e-01,-3.3333333333333337e-01],
        [-1.6666666666666669e-01, 1.6666666666666669e-01,-3.3333333333333337e-01, 3.3333333333333337e-01]
        ])

        #---------------
        #dx_v * dy_u
        #---------------
        self._dxdy = np.array([
        [ 2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01,-2.5000000000000000e-01],
        [-2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01, 2.5000000000000000e-01],
        [ 2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01,-2.5000000000000000e-01],
        [-2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01, 2.5000000000000000e-01]
        ])

        #---------------
        #dy_v * dx_u
        #---------------
        self._dydx = np.array([
        [ 2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01],
        [ 2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01],
        [-2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01],
        [-2.5000000000000000e-01, 2.5000000000000000e-01,-2.5000000000000000e-01, 2.5000000000000000e-01]
        ])

        #---------------
        #dy_v * dy_u
        #---------------
        self._dydy = np.array([
        [ 3.3333333333333337e-01, 1.6666666666666669e-01,-3.3333333333333337e-01,-1.6666666666666669e-01],
        [ 1.6666666666666669e-01, 3.3333333333333337e-01,-1.6666666666666669e-01,-3.3333333333333337e-01],
        [-3.3333333333333337e-01,-1.6666666666666669e-01, 3.3333333333333337e-01, 1.6666666666666669e-01],
        [-1.6666666666666669e-01,-3.3333333333333337e-01, 1.6666666666666669e-01, 3.3333333333333337e-01]
        ])

        #---------------
        #dx_v * u
        #---------------
        self._dxvu = np.array([
        [-1.6666666666666666e-01,-1.6666666666666666e-01,-8.3333333333333356e-02,-8.3333333333333343e-02],
        [ 1.6666666666666666e-01, 1.6666666666666666e-01, 8.3333333333333356e-02, 8.3333333333333343e-02],
        [-8.3333333333333356e-02,-8.3333333333333343e-02,-1.6666666666666669e-01,-1.6666666666666669e-01],
        [ 8.3333333333333356e-02, 8.3333333333333343e-02, 1.6666666666666669e-01, 1.6666666666666669e-01]
        ])*self._cell_length

        #---------------
        #dy_v * u
        #---------------
        self._dyvu = np.array([
        [-1.6666666666666666e-01,-8.3333333333333356e-02,-1.6666666666666669e-01,-8.3333333333333343e-02],
        [-8.3333333333333356e-02,-1.6666666666666666e-01,-8.3333333333333343e-02,-1.6666666666666669e-01],
        [ 1.6666666666666666e-01, 8.3333333333333356e-02, 1.6666666666666669e-01, 8.3333333333333343e-02],
        [ 8.3333333333333356e-02, 1.6666666666666666e-01, 8.3333333333333343e-02, 1.6666666666666669e-01]
        ])*self._cell_length

        #---------------
        #correction matrices at quadrature points, x component
        #---------------
        self._corx = [
        np.array([
        [-5.3901890521502134e-02,-6.8464377671353530e-03,-6.8464377671353530e-03,-8.6961161558069672e-04],
        [ 5.3901890521502134e-02, 6.8464377671353530e-03, 6.8464377671353530e-03, 8.6961161558069672e-04],
        [-6.8464377671353530e-03,-8.6961161558069672e-04,-8.6961161558069672e-04,-1.1045515751022222e-04],
        [ 6.8464377671353530e-03, 8.6961161558069672e-04, 8.6961161558069672e-04, 1.1045515751022222e-04]
        ])*self._cell_length,
        np.array([
        [-4.8598662630909978e-02,-4.8598662630909978e-02,-6.1728395061728383e-03,-6.1728395061728383e-03],
        [ 4.8598662630909978e-02, 4.8598662630909978e-02, 6.1728395061728383e-03, 6.1728395061728383e-03],
        [-6.1728395061728383e-03,-6.1728395061728383e-03,-7.8405341847273503e-04,-7.8405341847273503e-04],
        [ 6.1728395061728383e-03, 6.1728395061728383e-03, 7.8405341847273503e-04, 7.8405341847273503e-04]
        ])*self._cell_length,
        np.array([
        [-6.8464377671353530e-03,-5.3901890521502134e-02,-8.6961161558069672e-04,-6.8464377671353530e-03],
        [ 6.8464377671353530e-03, 5.3901890521502134e-02, 8.6961161558069672e-04, 6.8464377671353530e-03],
        [-8.6961161558069672e-04,-6.8464377671353530e-03,-1.1045515751022222e-04,-8.6961161558069672e-04],
        [ 8.6961161558069672e-04, 6.8464377671353530e-03, 1.1045515751022222e-04, 8.6961161558069672e-04]
        ])*self._cell_length,
        np.array([
        [-2.7385751068541409e-02,-3.4784464623227869e-03,-2.7385751068541409e-02,-3.4784464623227869e-03],
        [ 2.7385751068541409e-02, 3.4784464623227869e-03, 2.7385751068541409e-02, 3.4784464623227869e-03],
        [-2.7385751068541409e-02,-3.4784464623227869e-03,-2.7385751068541409e-02,-3.4784464623227869e-03],
        [ 2.7385751068541409e-02, 3.4784464623227869e-03, 2.7385751068541409e-02, 3.4784464623227869e-03]
        ])*self._cell_length,
        np.array([
        [-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02],
        [ 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02],
        [-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02],
        [ 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02]
        ])*self._cell_length,
        np.array([
        [-3.4784464623227869e-03,-2.7385751068541409e-02,-3.4784464623227869e-03,-2.7385751068541409e-02],
        [ 3.4784464623227869e-03, 2.7385751068541409e-02, 3.4784464623227869e-03, 2.7385751068541409e-02],
        [-3.4784464623227869e-03,-2.7385751068541409e-02,-3.4784464623227869e-03,-2.7385751068541409e-02],
        [ 3.4784464623227869e-03, 2.7385751068541409e-02, 3.4784464623227869e-03, 2.7385751068541409e-02]
        ])*self._cell_length,
        np.array([
        [-8.6961161558069672e-04,-1.1045515751022222e-04,-6.8464377671353530e-03,-8.6961161558069672e-04],
        [ 8.6961161558069672e-04, 1.1045515751022222e-04, 6.8464377671353530e-03, 8.6961161558069672e-04],
        [-6.8464377671353530e-03,-8.6961161558069672e-04,-5.3901890521502134e-02,-6.8464377671353530e-03],
        [ 6.8464377671353530e-03, 8.6961161558069672e-04, 5.3901890521502134e-02, 6.8464377671353530e-03]
        ])*self._cell_length,
        np.array([
        [-7.8405341847273503e-04,-7.8405341847273503e-04,-6.1728395061728383e-03,-6.1728395061728383e-03],
        [ 7.8405341847273503e-04, 7.8405341847273503e-04, 6.1728395061728383e-03, 6.1728395061728383e-03],
        [-6.1728395061728383e-03,-6.1728395061728383e-03,-4.8598662630909978e-02,-4.8598662630909978e-02],
        [ 6.1728395061728383e-03, 6.1728395061728383e-03, 4.8598662630909978e-02, 4.8598662630909978e-02]
        ])*self._cell_length,
        np.array([
        [-1.1045515751022222e-04,-8.6961161558069672e-04,-8.6961161558069672e-04,-6.8464377671353530e-03],
        [ 1.1045515751022222e-04, 8.6961161558069672e-04, 8.6961161558069672e-04, 6.8464377671353530e-03],
        [-8.6961161558069672e-04,-6.8464377671353530e-03,-6.8464377671353530e-03,-5.3901890521502134e-02],
        [ 8.6961161558069672e-04, 6.8464377671353530e-03, 6.8464377671353530e-03, 5.3901890521502134e-02]
        ])*self._cell_length
        ]

        #---------------
        #correction matrices at quadrature points, y component
        #---------------
        self._cory = [
        np.array([
        [-5.3901890521502134e-02,-6.8464377671353530e-03,-6.8464377671353530e-03,-8.6961161558069672e-04],
        [-6.8464377671353530e-03,-8.6961161558069672e-04,-8.6961161558069672e-04,-1.1045515751022222e-04],
        [ 5.3901890521502134e-02, 6.8464377671353530e-03, 6.8464377671353530e-03, 8.6961161558069672e-04],
        [ 6.8464377671353530e-03, 8.6961161558069672e-04, 8.6961161558069672e-04, 1.1045515751022222e-04]
        ])*self._cell_length,
        np.array([
        [-2.7385751068541409e-02,-2.7385751068541409e-02,-3.4784464623227869e-03,-3.4784464623227869e-03],
        [-2.7385751068541409e-02,-2.7385751068541409e-02,-3.4784464623227869e-03,-3.4784464623227869e-03],
        [ 2.7385751068541409e-02, 2.7385751068541409e-02, 3.4784464623227869e-03, 3.4784464623227869e-03],
        [ 2.7385751068541409e-02, 2.7385751068541409e-02, 3.4784464623227869e-03, 3.4784464623227869e-03]
        ])*self._cell_length,
        np.array([
        [-8.6961161558069672e-04,-6.8464377671353530e-03,-1.1045515751022222e-04,-8.6961161558069672e-04],
        [-6.8464377671353530e-03,-5.3901890521502134e-02,-8.6961161558069672e-04,-6.8464377671353530e-03],
        [ 8.6961161558069672e-04, 6.8464377671353530e-03, 1.1045515751022222e-04, 8.6961161558069672e-04],
        [ 6.8464377671353530e-03, 5.3901890521502134e-02, 8.6961161558069672e-04, 6.8464377671353530e-03]
        ])*self._cell_length,
        np.array([
        [-4.8598662630909978e-02,-6.1728395061728383e-03,-4.8598662630909978e-02,-6.1728395061728383e-03],
        [-6.1728395061728383e-03,-7.8405341847273503e-04,-6.1728395061728383e-03,-7.8405341847273503e-04],
        [ 4.8598662630909978e-02, 6.1728395061728383e-03, 4.8598662630909978e-02, 6.1728395061728383e-03],
        [ 6.1728395061728383e-03, 7.8405341847273503e-04, 6.1728395061728383e-03, 7.8405341847273503e-04]
        ])*self._cell_length,
        np.array([
        [-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02],
        [-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02,-2.4691358024691357e-02],
        [ 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02],
        [ 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02, 2.4691358024691357e-02]
        ])*self._cell_length,
        np.array([
        [-7.8405341847273503e-04,-6.1728395061728383e-03,-7.8405341847273503e-04,-6.1728395061728383e-03],
        [-6.1728395061728383e-03,-4.8598662630909978e-02,-6.1728395061728383e-03,-4.8598662630909978e-02],
        [ 7.8405341847273503e-04, 6.1728395061728383e-03, 7.8405341847273503e-04, 6.1728395061728383e-03],
        [ 6.1728395061728383e-03, 4.8598662630909978e-02, 6.1728395061728383e-03, 4.8598662630909978e-02]
        ])*self._cell_length,
        np.array([
        [-6.8464377671353530e-03,-8.6961161558069672e-04,-5.3901890521502134e-02,-6.8464377671353530e-03],
        [-8.6961161558069672e-04,-1.1045515751022222e-04,-6.8464377671353530e-03,-8.6961161558069672e-04],
        [ 6.8464377671353530e-03, 8.6961161558069672e-04, 5.3901890521502134e-02, 6.8464377671353530e-03],
        [ 8.6961161558069672e-04, 1.1045515751022222e-04, 6.8464377671353530e-03, 8.6961161558069672e-04]
        ])*self._cell_length,
        np.array([
        [-3.4784464623227869e-03,-3.4784464623227869e-03,-2.7385751068541409e-02,-2.7385751068541409e-02],
        [-3.4784464623227869e-03,-3.4784464623227869e-03,-2.7385751068541409e-02,-2.7385751068541409e-02],
        [ 3.4784464623227869e-03, 3.4784464623227869e-03, 2.7385751068541409e-02, 2.7385751068541409e-02],
        [ 3.4784464623227869e-03, 3.4784464623227869e-03, 2.7385751068541409e-02, 2.7385751068541409e-02]
        ])*self._cell_length,
        np.array([
        [-1.1045515751022222e-04,-8.6961161558069672e-04,-8.6961161558069672e-04,-6.8464377671353530e-03],
        [-8.6961161558069672e-04,-6.8464377671353530e-03,-6.8464377671353530e-03,-5.3901890521502134e-02],
        [ 1.1045515751022222e-04, 8.6961161558069672e-04, 8.6961161558069672e-04, 6.8464377671353530e-03],
        [ 8.6961161558069672e-04, 6.8464377671353530e-03, 6.8464377671353530e-03, 5.3901890521502134e-02]
        ])*self._cell_length
        ]

        #--------------
        #boundary matrices
        #--------------
        self._bdmt = {
        'xmin':np.array([
        [ 3.3333333333333337e-01, 0.0000000000000000e-00, 1.6666666666666669e-01, 0.0000000000000000e-00],
        [ 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00],
        [ 1.6666666666666669e-01, 0.0000000000000000e-00, 3.3333333333333337e-01, 0.0000000000000000e-00],
        [ 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00]
        ])*self._cell_length,
        'xmax':np.array([
        [ 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00],
        [ 0.0000000000000000e-00, 3.3333333333333337e-01, 0.0000000000000000e-00, 1.6666666666666669e-01],
        [ 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00],
        [ 0.0000000000000000e-00, 1.6666666666666669e-01, 0.0000000000000000e-00, 3.3333333333333337e-01]
        ])*self._cell_length,
        'ymin':np.array([
        [ 3.3333333333333337e-01, 1.6666666666666669e-01, 0.0000000000000000e-00, 0.0000000000000000e-00],
        [ 1.6666666666666669e-01, 3.3333333333333337e-01, 0.0000000000000000e-00, 0.0000000000000000e-00],
        [ 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00],
        [ 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00]
        ])*self._cell_length,
        'ymax':np.array([
        [ 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00],
        [ 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00, 0.0000000000000000e-00],
        [ 0.0000000000000000e-00, 0.0000000000000000e-00, 3.3333333333333337e-01, 1.6666666666666669e-01],
        [ 0.0000000000000000e-00, 0.0000000000000000e-00, 1.6666666666666669e-01, 3.3333333333333337e-01]
        ])*self._cell_length
        }

        #quadrature points for corrections
        self._qp_ref = [
        (1.1270166537925830e-01,1.1270166537925830e-01),
        (5.0000000000000000e-01,1.1270166537925830e-01),
        (8.8729833462074170e-01,1.1270166537925830e-01),
        (1.1270166537925830e-01,5.0000000000000000e-01),
        (5.0000000000000000e-01,5.0000000000000000e-01),
        (8.8729833462074170e-01,5.0000000000000000e-01),
        (1.1270166537925830e-01,8.8729833462074170e-01),
        (5.0000000000000000e-01,8.8729833462074170e-01),
        (8.8729833462074170e-01,8.8729833462074170e-01)
        ]

        self._qps = [(x*self._cell_length,y*self._cell_length) for x,y in self._qp_ref]

        '''
        The following section is for interpolation function
        '''
        self._f0 = lambda x,y: ((self._cell_length-x)/self._cell_length)*((self._cell_length-y)/self._cell_length)
        self._f1 = lambda x,y: (x/self._cell_length)*((self._cell_length-y)/self._cell_length)
        self._f2 = lambda x,y: ((self._cell_length-x)/self._cell_length)*(y/self._cell_length)
        self._f3 = lambda x,y: (x/self._cell_length)*(y/self._cell_length)
        self._interps = [np.array([self._f0(x,y) for x,y in self._qps]),
                         np.array([self._f1(x,y) for x,y in self._qps]),
                         np.array([self._f2(x,y) for x,y in self._qps]),
                         np.array([self._f3(x,y) for x,y in self._qps])]

        self._df0 = lambda x,y: (-(self._cell_length-y)/self._cell_area, -(self._cell_length-x)/self._cell_area)
        self._df1 = lambda x,y: ((self._cell_length-y)/self._cell_area, -x/self._cell_area)
        self._df2 = lambda x,y: (-y/self._cell_area, (self._cell_length-x)/self._cell_area)
        self._df3 = lambda x,y: (y/self._cell_area, x/self._cell_area)
        self._dx_interp = [np.array([self._df0(x,y)[0] for x,y in self._qps]),
                           np.array([self._df1(x,y)[0] for x,y in self._qps]),
                           np.array([self._df2(x,y)[0] for x,y in self._qps]),
                           np.array([self._df3(x,y)[0] for x,y in self._qps])]
        self._dy_interp = [np.array([self._df0(x,y)[1] for x,y in self._qps]),
                           np.array([self._df1(x,y)[1] for x,y in self._qps]),
                           np.array([self._df2(x,y)[1] for x,y in self._qps]),
                           np.array([self._df3(x,y)[1] for x,y in self._qps])]

        self._dotprod =lambda K, L:reduce(lambda z1, z2: z1+z2, map(lambda x: reduce(lambda x1, x2: x1*x2, x), zip(K, L)))
        self._qps_1d = [1.1270166537925830e-01*self._cell_length,
                        0.5*self._cell_length,
                        8.8729833462074170e-01*self._cell_length]
        self._b0 = lambda x: (self._cell_length-x)/self._cell_length
        self._b1 = lambda x: x/self._cell_length

    # get preassembled matrices
    def mass(self):
        return self._mass

    def streaming(self):
        return self._streaming

    def dxdx(self):
        return self._dxdx

    def dxdy(self):
        return self._dxdy

    def dydx(self):
        return self._dydx

    def dydy(self):
        return self._dydy

    def dxvu(self):
        return self._dxvu

    def dyvu(self):
        return self._dyvu

    def corx(self):
        return self._corx

    def cory(self):
        return self._cory

    def bdmt(self):
        return self._bdmt

    def get_sol_at_qps(self,sol_at_vertices):
        '''@brief Function used to return interpolated values at 3x3 Gauss quadrature points

        @param sol_at_vertices Iterable containing solutions in order of Vertices as
        left-bottom, right-bottom, left-up, right-up. List and Numpy arrays are both usable
        @return Interpolated solutions at quadrature points defined in self._qps (list of tuples)
        '''
        return self._dotprod(sol_at_vertices, self._interps)

    def get_grad_at_qps(self,sol_at_vertices):
        '''@brief Function used to return interpolated gradients at 3x3 Gauss quadrature points

        @param sol_at_vertices Iterable containing solutions in order of Vertices as
        left-bottom, right-bottom, left-up, right-up. List and Numpy arrays are both usable
        @return Interpolated gradients(list of tuples) at quadrature points defined in self._qps (list of tuples)
        '''
        dxs = self._dotprod(sol_at_vertices, self._dx_interp)
        dys = self._dotprod(sol_at_vertices, self._dy_interp)
        return [np.array([dx,dy]) for dx,dy in zip(dxs, dys)]

    def get_sol_at_bd_qps(self,sol_at_bd):
        assert len(sol_at_bd)==2, "Per boundary side, there are only two nodal values"
        return [sol_at_bd[0]*self._b0(x)+sol_at_bd[1]*self._b1(x) for x in self._qps_1d]
